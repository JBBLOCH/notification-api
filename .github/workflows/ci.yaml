name: CI

on: [push, pull_request]
env:
  tf_version: 'latest'
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Run tests with docker-compose-test
        run: |
          docker-compose -f ci/docker-compose-test.yml up --build --abort-on-container-exit --force-recreate

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Build and push to AWS ECR
        uses: kciter/aws-ecr-action@v1
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: notification_api
          region: us-east-2
          tags: ${{ github.sha }}
          create_repo: true
          dockerfile: ci/Dockerfile

  create-dev-base-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    env:
      tf_working_dir: './cd/base-infrastructure'
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS_plan: '-out=base-${{ github.sha }}.tfplan'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"base-${{ github.sha }}.tfplan"'

  create-dev-database:
    runs-on: ubuntu-latest
    needs: [create-dev-base-infrastructure]
    env:
      tf_working_dir: './cd/application-database'
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS_plan: '-out=database-${{ github.sha }}.tfplan'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"database-${{ github.sha }}.tfplan"'

  create-dev-app-infrastructure:
    runs-on: ubuntu-latest
    needs: create-dev-database
    env:
      tf_working_dir: './cd/application-infrastructure'
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS_plan: '-var="app_tag=${{ github.sha }}" -var="notify_environment=development" -out=application-${{ github.sha }}.tfplan'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"application-${{ github.sha }}.tfplan"'

  dev-run-migrations:
    runs-on: ubuntu-latest
    needs: [create-dev-database, create-dev-app-infrastructure]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Get private subnets
        id: get-private-subnets
        run: |
          echo "::set-output name=ids::$(aws ssm get-parameter --name /dev/notification-api/subnets/private | jq -r '.Parameter.Value')"

      - name: Get DB access security group
        id: get-db-security-group
        run: |
          echo "::set-output name=id::$(aws ssm get-parameter --name /dev/notification-api/security-group/access-db | jq -r '.Parameter.Value')"

      - name: Get outbound access security group
        id: get-outbound-security-group
        run: |
          echo "::set-output name=id::$(aws ssm get-parameter --name /dev/notification-api/security-group/access-outbound | jq -r '.Parameter.Value')"

      - name: Render migration task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/dev-db-migrations-task-definition.json
          container-name: notification-api-db-migrations
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.sha }}

      - name: Register migration task definition
        id: register
        run: |
          echo "::set-output name=arn::$(aws ecs register-task-definition --cli-input-json file://${{ steps.render.outputs.task-definition}} | jq -r '.taskDefinition.taskDefinitionArn')"

      - name: Run migration task
        run: |
          bash ./scripts/ecs_run.sh -c notification-fargate-cluster -d ${{ steps.register.outputs.arn }} -g ${{ steps.get-db-security-group.outputs.id }},${{ steps.get-outbound-security-group.outputs.id }} -s ${{ steps.get-private-subnets.outputs.ids }}

  dev-deploy:
    runs-on: ubuntu-latest
    needs: [create-dev-app-infrastructure, dev-run-migrations]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@master
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Render API task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/dev-api-task-definition.json
          container-name: notification-api
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.sha }}
      - name: Deploy to Amazon Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: notification-api-service
          cluster: notification-fargate-cluster
          wait-for-service-stability: true
      - name: Render celery task definition
        id: render-celery-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/dev-celery-task-definition.json
          container-name: notification-celery
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.sha }}
      - name: Deploy to Amazon Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-celery-container.outputs.task-definition }}
          service: notification-celery-service
          cluster: notification-fargate-cluster
          wait-for-service-stability: true