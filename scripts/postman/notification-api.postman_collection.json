{
	"info": {
		"_postman_id": "f16abf86-d4c9-42d1-b958-b04cbdaf1e09",
		"name": "notification-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "smoke-test",
			"item": [
				{
					"name": "healthcheck smoke test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4c84e2a-369c-498a-b3d6-e5dab64efe66",
								"exec": [
									"pm.test(\"Check if status is ok\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"})",
									"",
									"pm.test(\"Check if commit is correct\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.travis_commit).to.eql(pm.environment.get('expected-git-sha'));",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e1458a77-3f61-4425-9bd7-0f776a9d3f0e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notification-api}}/_status",
							"host": [
								"{{notification-api}}"
							],
							"path": [
								"_status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "create organization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4cf6a2b2-ebbb-42c1-80e3-966231aea053",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0b87fa4e-67e0-4066-a257-b5591e9f490d",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"organization-id\", jsonData.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test organization 2\",\n    \"active\": true,\n    \"organisation_type\": \"other\",\n    \"crown\": false\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/organisations",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"organisations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get organisations",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9235a6e-32a7-4eb7-961a-659a39a95c48",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e8ee8f91-21fc-4e18-bf16-b34b0f492f32",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"organization-id\", jsonData[0].id);",
							"} "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{notification-api}}/organisations",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"organisations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "024b3828-da47-4433-bf7c-30f7a2e43a81",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e032ed70-dcd7-4f11-ae1c-cb71da1d0fc4",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"user-id\", jsonData.id);",
							"} else {",
							"    var url = \"http://\" + pm.environment.get(\"notification-api\") + \"/user/email?email=saman.moshafi@thoughtworks.com\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"user-id\", res.json().data.id);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"JDJiJDEwJDRFSXJaTVhXdzQ2UjRlVlJBU0ZMdXVtWXlXbXlRWXl3YlpnVllSbDNsMTZ4bE40NzdZYnE2\",\n    \"email_address\": \"saman.moshafi@thoughtworks.com\",\n    \"mobile_number\": \"+17035017710\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/user",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0fb8738d-192c-436a-b337-ef94eada17fe",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf61be34-12f0-43fc-9545-1f5270281cba",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{notification-api}}/user",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "create service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d08a319c-a965-4f86-b3b6-eb08bfaa917e",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9608c029-3cd8-4ee2-8df7-e264947891fe",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"service-id\", jsonData.id);",
							"} else {",
							"    var url = \"http://\" + pm.environment.get(\"notification-api\") + \"/service/find-services-by-name?service_name=main service\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"service-id\", res.json().data[0].id);",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"main service for Govdelivery\",\n    \"user_id\": \"{{user-id}}\",\n    \"organisation_id\": \"{{organization-id}}\",\n    \"message_limit\": 1000,\n    \"restricted\": false,\n    \"active\": true,\n    \"email-from\": \"{{email-from}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/service",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "get services",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "df2f9e1f-2d6f-4922-8c46-8b828e64b42a",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{notification-api}}/service",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "create sms template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "14232c1c-ca0b-421f-84cd-d9dd24e6986e",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84f07249-f8c7-4031-8ac9-2c5ba24207e6",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"sms\",\n    \"content\": \"This is a test SMS message\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/template",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "create email template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6232fa19-f332-4a19-a894-4705fbc1d370",
						"exec": [
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2e6b7815-4c33-46c4-8098-71d16d41217a",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"email\",\n    \"content\": \"This is a test email\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/template",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "update template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0af9be38-c79e-46da-ad1d-a1c3fa49218e",
						"type": "text/javascript",
						"exec": [
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d9ff8ea9-8748-49f0-b9ce-89ea1b4d2464",
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"some name\",\n    \"subject\": \"some subject\",\n    \"template_type\": \"email\",\n    \"content\": \"some content\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/template/{{template-id}}",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template",
						"{{template-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get templates for service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cdfaca68-861a-4e57-82ce-5a7fac6624db",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0fdfe183-5d7d-424e-b8c9-18a6f685e804",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data[0].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/template",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "create api key",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da67bcbd-5337-413c-bbb0-2869d3ab83d3",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eaa21b49-5e4b-448f-9c93-11bfab26472e",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"service-api-secret\", jsonData.data);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"created_by\": \"{{user-id}}\",\n    \"key_type\": \"normal\",\n    \"name\": \"postmantestapikey\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/api-key",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "revoke api key",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3e64d4c9-9158-49a9-8cf5-71310fdf01fb",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/api-key/revoke/{{api-key-id}}",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-key",
						"revoke",
						"{{api-key-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get api keys for service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc8d8527-16b6-4323-b321-0261b302c649",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "edb8ecab-aae3-4521-a811-d1483a3bf457",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"api-key-id\", jsonData.apiKeys.find(apiKey => apiKey.expiry_date === null).id);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{notification-api}}/service/{{service-id}}/api-keys",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-keys"
					]
				}
			},
			"response": []
		},
		{
			"name": "send sms",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87aa56c2-8c9a-470f-9f97-2141c4c87bc0",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-secret\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template\": \"{{template-id}}\",\n    \"to\": \"+17035017710\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/notifications/sms",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"notifications",
						"sms"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key"
			},
			"response": []
		},
		{
			"name": "send sms 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0721acd8-d109-4ea0-8c72-0e0064e473a4",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-secret\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"phone_number\": \"+17035017710\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/v2/notifications/sms",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"v2",
						"notifications",
						"sms"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-secret to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "send email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "936f2ec3-c70b-433c-97fa-c4c9a3b22e91",
						"type": "text/javascript",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-secret\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7001046c-22db-47a3-8d89-4787b23f90a1",
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"notification-id\", jsonData.id);",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"email_address\": \"marisa.hoenig@thoughtworks.com\"\n}"
				},
				"url": {
					"raw": "http://{{notification-api}}/v2/notifications/email",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"v2",
						"notifications",
						"email"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-secret to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "notification status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a540cf08-35af-41b6-8e93-326ddcf5fc4b",
						"type": "text/javascript",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-secret\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"url": {
					"raw": "http://{{notification-api}}/v2/notifications/{{notification-id}}",
					"protocol": "http",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"v2",
						"notifications",
						"{{notification-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "healthcheck",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notification-api}}/_status",
					"host": [
						"{{notification-api}}"
					],
					"path": [
						"_status"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}