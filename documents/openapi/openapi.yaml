openapi: 3.0.0
info:
  title: VA Notify API Documentation
  description: "This documents the API schemas for consumption by internal VA developers.<br />
  <h1>Authorisation header</h1>
  <p>You must include an authorisation header that is encoded using JSON Web Tokens.
  JSON Web Tokens have a standard header and a payload. The header consists of:
  <pre><code>
  {\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: &quot;JWT&quot;,\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;alg&quot;: &quot;HS256&quot;\n
  &nbsp;}
  </code></pre>
  </p>
  <p>
  The payload consists of:
  <pre><code>
  {\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;iss&quot;: &quot;26785a09-ab16-4eb0-8407-a37497a57506&quot;,\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;iat&quot;: 1568818578\n
  &nbsp;}
  </code></pre>
  </p>
  <p>
    Refer to the <a href='https://jwt.io/' target='_blank'>JSON Web Tokens website</a> for more information
    on encoding your authorisation header.
  </p>
  "
  version: 1.0.0
  contact:
    name: VA Notify team
servers:
  - url: 'https://dev.api.twnotify.com'
  - url: 'https://staging.api.twnotify.com'
paths:
  /organisations:
    get:
      summary: Get list of all organisations
      tags:
        - organisation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful OK response of all organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationResponseCore'
    post:
      summary: Create an organisation
      tags:
        - organisation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  nullable: false
                  type: boolean
                name:
                  nullable: false
                  type: string
                organisation_type:
                  type: string
                  enum:
                    - other
              required:
                - active
                - crown
                - name
                - organisation_type
              type: object
      responses:
        '201':
          description: Successful CREATED response of an organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
  /organisations/{organisation_id}/:
    get:
      summary: find organization by id
      tags:
        - organisation
      parameters:
        - in: path
          name: organisation_id
          schema:
            type: string
            format: uuid
          required: true
          allowEmptyValue: false
          description: Organization identifier
      responses:
        200:
          description: OK indicates that organization was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponseCore'
    post:
      summary: update an organization
      tags:
        - organisation
      parameters:
        - in: path
          name: organisation_id
          schema:
            type: string
            format: uuid
          required: true
          allowEmptyValue: false
          description: Organization identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  nullable: true
                  type: boolean
                name:
                  nullable: true
                  type: string
                organisation_type:
                  nullable: false
                  type: string
                  enum:
                    - other
      responses:
        204:
          description: organization update was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponseCore'
        404:
          description: organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /user:
    post:
      summary: Create a user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: A user was successfully created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/User'
    get:
      summary: Get a list of all users
      tags:
        - user
      responses:
        '200':
          description: Successful response for getting all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /{user_id}:
    post:
      summary: Update a user
      tags:
        - user
      parameters:
        - in: path
          name: 'user_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: User identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  nullable: false
                email_address:
                  type: string
                  nullable: false
                mobile_number:
                  type: string
                  nullable: false
                auth_type:
                  type: string
                  format: auth type
                  nullable: false
                  enum:
                    - sms_auth
                    - email_auth
      responses:
        '201':
          description: A user was successfully updated
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/User'
  /service:
    post:
      summary: Create a service
      tags:
        - service
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: A service was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '403':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      summary: Get all services
      tags:
        - service
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response for getting all services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  '/service/{service_id}/template':
    get:
      summary: Get all existing templates for a service
      tags:
        - template
      parameters:
        - in: path
          name: 'service_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Service identifier
      responses:
        '200':
          description: Successful response for getting all templates for a service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
    post:
      summary: Create a template for an existing service
      tags:
        - template
      parameters:
        - in: path
          name: 'service_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Service identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '201':
          description: Successful response for creating a template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  '/service/{service_id}/template/{template_id}':
    get:
      summary: Get an existing template for a service
      tags:
        - template
      parameters:
        - in: path
          name: 'service_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Service identifier
        - in: path
          name: 'template_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Template identifier
      responses:
        '200':
          description: Successful response for getting templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    post:
      summary: Update an existing template
      tags:
        - template
      parameters:
        - in: path
          name: 'service_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Service identifier
        - in: path
          name: 'template_id'
          schema:
            type: integer
            format: uuid
          required: true
          allowEmptyValue: false
          description: Template identifier to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '200':
          description: Response for successful update of an existing template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  /v2/notifications/{notification_type}:
    post:
      summary: Send a notification
      tags:
        - notification
      parameters:
        - in: path
          name: 'notification_type'
          schema:
            type: string
            enum:
              - sms
              - email
          required: true
          allowEmptyValue: false
          description: Type of notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SMSNotificationRequest'
                - $ref: '#/components/schemas/EmailNotificationRequest'
      responses:
        '200':
          description: Details of queued notification.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Notification'
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          body:
                            type: string
                          from_number:
                            type: string
                        required:
                          - body
                          - from_number
                    required:
                      - content
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          nullable: false
        result:
          type: string
          nullable: false
        status_code:
          type: integer
          nullable: true
      required:
        - message
        - result
    OrganisationResponseCore:
      type: object
      properties:
        active:
          nullable: true
          type: boolean
        count_of_live_services:
          nullable: false
          type: integer
        domains:
          items:
            nullable: false
            type: string
          nullable: true
          type: array
        id:
          type: string
          nullable: false
          format: uuid
        name:
          nullable: false
          type: string
        organisation_type:
          enum:
            - other
          nullable: false
          type: string
    OrganisationResponse:
      type: object
      nullable: false
      allOf:
        - $ref: '#/components/schemas/OrganisationResponseCore'
      properties:
        agreement_signed:
          format: datetime
          nullable: true
          type: string
        agreement_signed_at:
          format: datetime
          nullable: true
          type: string
        agreement_signed_by_id:
          format: uuid
          nullable: true
          type: string
        agreement_signed_on_behalf_of_email_address:
          nullable: true
          type: string
        agreement_signed_on_behalf_of_name:
          nullable: true
          type: string
        agreement_signed_version:
          nullable: false
          type: number
        crown:
          nullable: false
          type: boolean
        email_branding_id:
          format: uuid
          nullable: true
          type: string
        letter_branding_id:
          format: uuid
          nullable: true
          type: string
        request_to_go_live_notes:
          nullable: true
          type: string
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
        email_address:
          type: string
          nullable: false
        mobile_number:
          type: string
          nullable: false
        state:
          type: string
          nullable: false
        user_permissions:
          type: array
          nullable: false
          items:
            type: string
        auth_type:
          type: string
          format: auth type
          nullable: false
          enum:
            - sms_auth
            - email_auth
      required:
        - name
        - password
        - email_address
        - mobile_number
        - state
        - user_permissions
    User:
      type: object
      properties:
        additional_information:
          type: object
        auth_type:
          type: string
        blocked:
          type: boolean
        current_session_id:
          type: string
        email_address:
          type: string
        failed_login_count:
          type: integer
        id:
          type: string
        logged_in_at:
          type: string
        mobile_number:
          type: string
        name:
          type: string
        organisations:
          type: array
          items:
            type: string
            format: uuid
        password_changed_at:
          type: string
          format: datetime
        permissions:
          type: object
          properties:
            uuid:
              type: array
              format: uuid
              items:
                type: string
                enum:
                  - manage_users
                  - manage_templates
                  - manage_settings
                  - send_texts
                  - send_emails
                  - send_letters
                  - manage_api_keys
                  - view_activity
        platform_admin:
          type: boolean
        services:
          type: array
          items:
            type: string
            format: '{{service-uuid}}'
        state:
          type: boolean
    CreateServiceRequest:
      type: object
      properties:
        active:
          type: boolean
          nullable: true
        created_by:
          type: string
          format: uuid
          nullable: false
        email-from:
          type: string
          format: email
          nullable: false
        message_limit:
          type: integer
          nullable: true
        name:
          type: string
          nullable: false
        organisation_id:
          type: string
          format: uuid
          nullable: true
        restricted:
          type: boolean
          nullable: false
        user_id:
          type: string
          format: uuid
          nullable: false
      required:
        - active
        - created_by
        - email-from
        - message_limit
        - name
        - organisation_id
        - restricted
        - user_id
    Service:
      type: object
      properties:
        active:
          type: boolean
        all_template_folders:
          type: array
          items:
            type: string
        annual_billing:
          type: array
          items:
            type: string
            format: uuid
        consent_to_research:
          type: boolean
        contact_link:
          type: string
        count_as_live:
          type: boolean
        created_by:
          type: string
          format: uuid
        crown:
          type: boolean
        email_branding:
          type: string
          format: uuid
        email_from:
          type: string
          format: email
        go_live_at:
          type: string
          format: datetime
        go_live_user:
          type: string
          format: uuid
        id:
          type: string
          format: uuid
        inbound_api:
          type: array
          items:
            type: string
            format: url
        inbound_number:
          type: string
          format: uuid
        inbound_sms:
          type: array
          items:
            type: string
            format: uuid
        letter_branding:
          type: string
          format: uuid
        letter_contact_block:
          type: string
        letter_logo_filename:
          type: string
        message_limit:
          type: number
        name:
          type: string
        organisation:
          type: string
          format: uuid
        organisation_type:
          type: string
          nullable: true
          enum:
            - other
        permissions:
          type: array
          items:
            type: string
            enum:
              - international_sms
              - email
              - sms
              - inbound_sms
              - schedule_notifications
        prefix_sms:
          type: boolean
        rate_limit:
          type: number
        research_mode:
          type: boolean
        restricted:
          type: boolean
        sending_domain:
          type: string
          nullable: true
        service_callback_api:
          type: array
          items:
            type: string
            format: uuid
        service_data_retention:
          type: array
          items:
            type: string
        smtp_user:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: number
        volume_email:
          type: integer
          nullable: true
        volume_letter:
          type: integer
          nullable: true
        volume_sms:
          type: integer
          nullable: true
        whitelist:
          type: array
          items:
            properties:
              email_addresses:
                type: array
                items:
                  type: string
                  format: email
              phone_numbers:
                type: array
                items:
                  type: string
    CreateTemplateRequest:
      type: object
      nullable: false
      properties:
        content:
          type: string
          nullable: false
        created_by:
          type: string
          format: uuid
          nullable: false
        name:
          type: string
          nullable: false
        parent_folder_id:
          type: string
          format: uuid
          nullable: false
        postage:
          type: string
          nullable: false
        process_type:
          type: string
          enum:
            - normal
            - priority
        service:
          type: string
          format: uuid
          nullable: false
        subject:
          type: string
          nullable: false
        template_type:
          type: string
          enum:
            - sms
            - email
            - letter
      required:
        - name
        - template_type
        - content
        - service
        - created_by
    Template:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTemplateRequest'
      properties:
        archived:
          type: boolean
        created_at:
          type: string
          format: datetime
        folder:
          type: string
          format: uuid
        hidden:
          type: boolean
        id:
          type: string
          format: uuid
        redact_personalisation:
          type: boolean
        reply_to:
          type: string
          format: uuid
        reply_to_text:
          type: string
        service_letter_contact:
          type: string
          format: uuid
        template_redacted:
          type: string
          format: uuid
        updated_at:
          type: string
          format: datetime
        version:
          type: number
    NotificationRequest:
      type: object
      properties:
        reference:
          type: string
        template_id:
          type: string
          format: uuid
        personalisation:
          type: object
        scheduled_for:
          type: string
          format: datetime within next day
      required:
        - template_id
    SMSNotificationRequest:
      allOf:
        - $ref: '#/components/schemas/NotificationRequest'
        - type: object
          properties:
            sms_sender_id:
              type: string
              format: uuid
            phone_number:
              type: string
              format: phone_number
          required:
            - phone_number
    EmailNotificationRequest:
      allOf:
        - $ref: '#/components/schemas/NotificationRequest'
        - type: object
          properties:
            email_reply_to_id:
              type: string
              format: uuid
            email_address:
              type: string
              format: email_address
          required:
            - email_address
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        reference:
          type: string
        uri:
          type: string
          format: uri
        template:
          type: object
          properties:
            id:
              type: string
              format: uuid
            version:
              type: integer
            uri:
              type: string
              format: uri
          required:
            - id
            - version
            - uri
        scheduled_for:
          type: string
      required:
        - id
        - uri
        - template
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT